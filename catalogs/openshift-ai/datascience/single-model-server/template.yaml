apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: rhoai-single-model-server
  title: Red Hat OpenShift AI - Single Model Server
  description: |
    This template automates the deployment of a Single Model Server in Red Hat OpenShift AI. 
    It provides a scalable environment for serving a single AI/ML model, allowing teams to 
    quickly launch, manage, and scale their AI models in production. The template ensures 
    seamless integration with OpenShift AI services, offering support for continuous 
    deployment, model monitoring, and version management. Ideal for projects focused on 
    deploying one model at a time with optimized resources.
    ~~~~~
    Prerequisites: Run the following templates before using this:
    * Create a GitLab Root Self-Service Repository (One-Time Use)
    * Red Hat OpenShift AI - Data Science project
    * Red Hat OpenShift AI - Data Connector
    * Red Hat OpenShift AI - Data Science Sync Model
  tags:
    - openshift-ai
    - model-serving
    - automation
    - ai-workloads
    - mlops
    - gitlab
    - argocd

spec:
  owner: data-science
  system: self-service
  type: service
  parameters:

    - title: Model Serving Settings
      ui:group: data-model-serving
      required:
        - rootSelfServiceRepo
        - projectEntity
        - modelName
      properties:
        rootSelfServiceRepo:
          title: Root Self-Service Repository
          type: string
          description: The root self-service repository that contains artifact deployment configurations.
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: self-service
        projectEntity:
          title: Project Name
          type: string
          description: The project where the data connector is integrated.
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: data-science-project
        modelName:
          title: Model Name
          description: The name of the Model.
          type: string
          pattern: "^[a-z][a-z0-9-]+$"
          minLength: 3
          maxLength: 30
        numGPU:
          title: Number of GPU
          description: The Number of GPUs to provide to running model.
          default: 1
          type: number
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
        memoryLimit:
          title: Memory Limit
          description: The Memory Limit for the running model(Mi,Gi).
          type: string
          default: "35Gi"
        cpuLimit:
          title: CPU Limit
          description: The CPU Limit for the running model(1000m).
          type: string
          default: "1000m"

    - title: Model Serving Settings
      ui:group: data-model-serving
      required:
        - dataConnectorEntity
        - modelEntity
      properties:
        dataConnectorEntity:
          title: Data Connector Name
          type: string
          description: The name of the data connector.
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: data-connector
        modelEntity:
          title: Model Name
          type: string
          description: The name of the model
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: model

  steps:

    #################
    ## Fetch Entities
    #################

    - action: catalog:fetch
      id: fetchSelfServiceEntity
      name: Fetch Root Self-Service Repo Entity
      input:
        entityRef: ${{ parameters.rootSelfServiceRepo }}

    - action: catalog:fetch
      id: fetchModelEntity
      name: Fetch Model Entity
      input:
        entityRef: ${{ parameters.modelEntity }}

    ###########################
    ## Template the Application
    ###########################
    - id: applicationTemplate
      name: Template Helm Application
      action: fetch:template
      input:
        url: "../../../../skeletons/applications/helm/"
        targetPath: "projects/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/"
        values:
          repoName: "${{ parameters.projectEntity | parseEntityRef | pick('name') }}-${{ parameters.modelName }}-model-server"
          namespace: "${{ parameters.projectEntity | parseEntityRef | pick('name') }}"
          labels:
            project: ${{ parameters.projectEntity | parseEntityRef | pick('name') }}
            modelServer: ${{ parameters.modelName }}-model-server
          chart:
            name: "rhoai-single-model-server"
            chartUrl: "https://poc-examples.github.io/supporting-charts"
            chartVersion: "0.1.7"
          projectName: "${{ parameters.projectEntity | parseEntityRef | pick('name') }}"
          automated:
            prune: true
            selfHeal: true
          createNamespace: "true"
          valuesObject: |
            serviceName: ${{ parameters.modelName }}-model-server
            servingRuntime: multi-gpu-vllm-runtime
            replicas: 1
            GPUCount: ${{ parameters.numGPU }}
            dataConnection:
              name: ${{ parameters.dataConnectorEntity | parseEntityRef | pick('name') }}
              modelPath: models/${{ steps['fetchModelEntity'].output.entity.spec.repository }}/snapshots/${{ steps['fetchModelEntity'].output.entity.spec.revision }}
            resources:
              cpu: "${{ parameters.cpuLimit }}"
              mem: "${{ parameters.memoryLimit }}"

    - id: templateModelServerEntity
      name: Template Model Server Entity
      action: fetch:template
      input:
        url: "../../../../skeletons/backstage/model-server"
        targetPath: "backstage/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/"
        values:
          projectName: ${{ parameters.projectEntity | parseEntityRef | pick('name') }}
          name: ${{ parameters.modelName }}-model-server
          owner: |
            ${{ "user:" + user.entity.metadata.namespace + "/" + user.entity.metadata.name if user.entity.metadata.namespace else "default/guest" }}
          rootSelfServiceRepo: ${{ parameters.rootSelfServiceRepo }}
          projectEntity: ${{ parameters.projectEntity }}
          dataConnectorEntity: ${{ parameters.dataConnectorEntity }}
          modelEntity: ${{ parameters.modelEntity }}

    ##############
    ## Rename File
    ##############
    - id: changeTemplateName
      name: Change Template Name
      action: fs:rename
      input:
        files:
          - from: "projects/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/application.yaml"
            to: "projects/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/${{ parameters.modelName }}-model-server.yaml"

    - id: changeBackstageTemplateName
      name: Change Backstage Template Name
      action: fs:rename
      input:
        files:
          - from: "backstage/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/model-server.yaml"
            to: "backstage/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/${{ parameters.modelName }}-model-server.yaml"

    ##########################
    ## Push Repository Changes
    ##########################
    - id: publishManifests
      name: Publishing to the Source Code Repository
      action: gitlab:repo:push
      input:
        description: |
          Publishing single model server to the source code repository
        repoUrl: gitlab.com?owner=${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.owner }}&repo=${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.repository }}
        branchName: ${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.branch }}
        commitAction: create
        commitMessage: "Created ${{ parameters.modelName }}-model-server Model Server"

    ########################
    ## Register Catalog Info
    ########################
    - id: registerCatalog
      name: "Register Catalog Info"
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.remoteUrl }}
        catalogInfoPath: /-/blob/${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.branch }}/backstage/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/${{ parameters.modelName}}-model-server.yaml

  output:
    links:
      - title: GitLab Repository
        url: ${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['registerCatalog'].output.entityRef }}
