apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: data-workbench
  title: Red Hat OpenShift AI - Workbench
  description: |
    This template automates the provisioning of a Workbench in Red Hat OpenShift AI. It provides a 
    structured environment for data scientists and developers to build, test, and deploy AI models 
    seamlessly within OpenShift AI. The template sets up the required infrastructure for AI workloads, 
    including workbenches for collaborative experimentation, model training, and integration with other 
    AI services. Teams can leverage this workbench for streamlined AI development with built-in support 
    for continuous integration and deployment through ArgoCD.
  tags:
    - openshift-ai
    - workbench
    - automation
    - data-science
    - ai-workloads
    - gitlab
    - argocd

spec:
  owner: data-science
  system: self-service
  type: Workbench
  parameters:
                
    - title: Workbench Settings
      ui:group: data-workbench
      required:
        - rootSelfServiceRepo
        - projectEntity
        - dataConnectorEntity
        - workbenchName
        - storageSize
      properties:
        rootSelfServiceRepo:
          title: Root Self-Service Repository
          type: string
          description: The root self-service repository that contains artifact deployment configurations.
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: self-service
        projectEntity:
          title: Project Name
          type: string
          description: The project where the data connector is integrated.
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: data-science-project
        dataConnectorEntity:
          title: Data Connector Name
          type: string
          description: The name of the data connector.
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: data-connector
        workbenchName:
          title: Workbench Name
          description: The name of the workbench.
          type: string
          pattern: "^[a-z][a-z0-9-]+$"
          minLength: 3
          maxLength: 30
        enableCUDA:
          title: Enable CUDA
          description: Enables CUDA support for Workbench.
          default: "false"
          enum:
            - "true"
            - "false"
          type: string
        numGPU:
          title: Number of GPUs
          description: Set the number of GPUs to be allocated to the Workbench.
          default: 0
          type: number
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
        storageSize:
          title: Storage Size
          description: The storage size of the workbench working directory.
          default: "100Gi"
          type: string
          pattern: "^[0-9]+[KMGTP]i$"
          minLength: 3
          maxLength: 6

  steps:

    #################
    ## Fetch Entities
    #################

    - action: catalog:fetch
      id: fetchSelfServiceEntity
      name: Fetch Root Self-Service Repo Entity
      input:
        entityRef: ${{ parameters.rootSelfServiceRepo }}

    ###########################
    ## Template the Application
    ###########################
    - id: applicationTemplate
      name: Template Helm Application
      action: fetch:template
      input:
        url: "../../../../skeletons/applications/helm/"
        targetPath: "projects/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/"
        values:
          repoName: "${{ parameters.workbenchName }}-workbench"
          namespace: "${{ parameters.projectEntity | parseEntityRef | pick('name') }}"
          labels:
            project: ${{ parameters.projectEntity | parseEntityRef | pick('name') }}
            workbench: ${{ parameters.workbenchName }}-workbench
          chart:
            name: "data-workbench"
            chartUrl: "https://poc-examples.github.io/supporting-charts"
            chartVersion: "0.1.19"
          projectName: "${{ parameters.projectEntity | parseEntityRef | pick('name') }}"
          automated:
            prune: true
            selfHeal: true
          createNamespace: "true"
          valuesObject: |
            domain: main
            user: cluster-admin
            namespace: "${{ parameters.projectEntity | parseEntityRef | pick('name') }}"
            notebookName: "${{ parameters.workbenchName }}-workbench"
            storageSize: "${{ parameters.storageSize }}"
            dataConnectionName: "${{ parameters.dataConnectorEntity | parseEntityRef | pick('name') }}"
            enabledCUDA: ${{ parameters.enableCUDA }}
            numGPU: "${{ parameters.numGPU }}"

    - id: templateModelServerEntity
      name: Template Model Server Entity
      action: fetch:template
      input:
        url: "../../../../skeletons/backstage/workbench"
        targetPath: "backstage/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/"
        values:
          projectName: ${{ parameters.projectEntity | parseEntityRef | pick('name') }}
          name: ${{ parameters.workbenchName }}-workbench
          owner: user:${{ user.entity.metadata.namespace}}/${{ user.entity.metadata.name }}
          subcomponentOf: ${{ parameters.projectEntity }}
          dependsOn: ${{ parameters.rootSelfServiceRepo }}
    
    ##############
    ## Rename File
    ##############
    - id: changeTemplateName
      name: Change Template Name
      action: fs:rename
      input:
        files:
          - from: "projects/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/application.yaml"
            to: "projects/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/${{ parameters.workbenchName }}-workbench.yaml"

    - id: changeBackstageTemplateName
      name: Change Backstage Template Name
      action: fs:rename
      input:
        files:
          - from: "backstage/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/workbench.yaml"
            to: "backstage/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/${{ parameters.workbenchName }}-workbench.yaml"

    ##########################
    ## Push Repository Changes
    ##########################
    - id: publishManifests
      name: Publishing to the Source Code Repository
      action: gitlab:repo:push
      input:
        description: |
          placeholder
        repoUrl: gitlab.com?owner=${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.owner }}&repo=${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.repository }}
        branchName: ${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.branch }}
        commitAction: create
        commitMessage: "Created ${{ parameters.workbenchName }}-workbench Workbench"

    ########################
    ## Register Catalog Info
    ########################
    - id: registerCatalog
      name: "Register Catalog Info"
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.remoteUrl }}
        catalogInfoPath: /-/blob/${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.branch }}/backstage/${{ parameters.projectEntity | parseEntityRef | pick('name') }}/${{ parameters.workbenchName}}-workbench.yaml

  output:
    links:
      - title: GitLab Repository
        url: ${{ steps['fetchSelfServiceEntity'].output.entity.spec.gitlab.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['registerCatalog'].output.entityRef }}